{"ast":null,"code":"import { computed, watch, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nexport default {\n  __name: 'PokemonList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const searchQuery = computed({\n      //以下をsearchQueryとする\n      get: () => store.state.searchQuery,\n      //storeのstateに入っているsearchQueryを取得　？？？なぜこれが必要？\n      set: value => store.commit('SET_SEARCH_QUERY', value) //searchQueryの値（検索窓に入力した値）をstoreのSET_SEARCH_QUERYの値としてコミット\n    });\n    const sortOrder = computed(() => store.state.sortOrder); //storeのstateに入っているsortOrderの値を取得して「sortOrder」とする\n    const filteredPokemons = computed(() => store.getters.filteredPokemons); //storeのgettersに入っているfilteredPokemonsを「filteredPokemons」とする\n    const loading = computed(() => store.getters.loading); //storeのgettersに入っているloadingを「loading」とする\n    const pokemonDetails = name => store.getters.pokemonDetails(name); //storenのgettersに入っているpokemonDetails(name)を「pokemonDetails」とする\n\n    const fetchPokemons = () => store.dispatch('fetchPokemons'); //storeのfetchPokemonを「fetchPokemon」とする\n    const fetchPokemonDetails = name => store.dispatch('fetchPokemonDetails', name); //storeのfetchPokemonDetails(name)を「fetchPokemonDetails」とする\n\n    const toggleSortOrder = () => {\n      const newOrder = sortOrder.value === 'asc' ? 'desc' : 'asc'; //sortOrderの値が'asc'なら「desc」を、そうでなければ「asc」をnewOrderとする\n      store.commit('SET_SORT_ORDER', newOrder); //storeのSET_SORT_ORDERにnewOrderをコミット\n    };\n    const loadPokemonDetails = name => {\n      if (!pokemonDetails(name)) {\n        //？？？pokemonDetails(name)がなかったら？\n        fetchPokemonDetails(name); //nameを引数としてfetchPokemonDetailsを実行\n      }\n    };\n    watch(filteredPokemons, newPokemons => {\n      //？？？\n      newPokemons.forEach(pokemon => loadPokemonDetails(pokemon.name)); //？？？\n    });\n    onMounted(() => {\n      fetchPokemons(); //fetchPokemons()を実行\n    });\n    const __returned__ = {\n      store,\n      searchQuery,\n      sortOrder,\n      filteredPokemons,\n      loading,\n      pokemonDetails,\n      fetchPokemons,\n      fetchPokemonDetails,\n      toggleSortOrder,\n      loadPokemonDetails,\n      computed,\n      watch,\n      onMounted,\n      get useStore() {\n        return useStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","watch","onMounted","useStore","store","searchQuery","get","state","set","value","commit","sortOrder","filteredPokemons","getters","loading","pokemonDetails","name","fetchPokemons","dispatch","fetchPokemonDetails","toggleSortOrder","newOrder","loadPokemonDetails","newPokemons","forEach","pokemon"],"sources":["/Users/yu/pokemon-app_practice/src/components/PokemonList.vue"],"sourcesContent":["<template>\n    <v-container>\n        <v-row>\n            <v-col cols=\"12\">\n                <v-text-field\n                    label=\"Search Pokemons\"\n                    v-model=\"searchQuery\"\n                ></v-text-field>\n            </v-col>\n            <v-col cols=\"12\">\n                <v-btn @click=\"toggleSortOrder\" color=\"primary\">\n                    Sort: {{ sortOrder === 'asc' ? 'Ascending' : 'Descending' }} <!-- sortOrderが「asc」だったらAscending、そうでなければDescendingという文言を表示 -->\n                </v-btn>\n            </v-col>\n            <v-col cols=\"12\" v-if=\"loading\" class=\"loading_area\"> <!-- loadingがtrueの場合、このエリアを表示 -->\n                <v-progress-circular\n                    indeterminate\n                    color=\"primary\"\n                    size=\"64\"\n                    ></v-progress-circular>\n            </v-col>\n            <v-col v-if=\"!loading\" v-for=\"pokemon in filteredPokemons\" :key=\"pokemon.name\" cols=\"12\" md=\"4\">\n                <v-card>\n                    <v-card-title>{{ pokemonDetails(pokemon.name)?.name || pokemon.name }}</v-card-title> <!-- ？？？pokemon.nameではだめなのか？ -->\n                    <v-card-text>\n                        <v-img\n                            v-if=\"pokemonDetails(pokemon.name)\"\n                            :src=\"pokemonDetails(pokemon.name).sprites.front_default\"  \n                            :alt=\"pokemon.name\"\n                            height=\"200\"  \n                        ></v-img>\n                        <v-progress-circular\n                            v-else\n                            interminate\n                            color=\"primary\"\n                            ></v-progress-circular>\n                    </v-card-text>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script setup>\nimport { computed,watch, onMounted } from 'vue';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\n\nconst searchQuery = computed({ //以下をsearchQueryとする\n    get: () => store.state.searchQuery, //storeのstateに入っているsearchQueryを取得　？？？なぜこれが必要？\n    set: (value) => store.commit('SET_SEARCH_QUERY', value) //searchQueryの値（検索窓に入力した値）をstoreのSET_SEARCH_QUERYの値としてコミット\n});\n\nconst sortOrder = computed(() => store.state.sortOrder); //storeのstateに入っているsortOrderの値を取得して「sortOrder」とする\nconst filteredPokemons = computed(() => store.getters.filteredPokemons); //storeのgettersに入っているfilteredPokemonsを「filteredPokemons」とする\nconst loading = computed(() => store.getters.loading); //storeのgettersに入っているloadingを「loading」とする\nconst pokemonDetails = (name) => store.getters.pokemonDetails(name); //storenのgettersに入っているpokemonDetails(name)を「pokemonDetails」とする\n\nconst fetchPokemons = () => store.dispatch('fetchPokemons') //storeのfetchPokemonを「fetchPokemon」とする\nconst fetchPokemonDetails = (name) => store.dispatch('fetchPokemonDetails', name);//storeのfetchPokemonDetails(name)を「fetchPokemonDetails」とする\n\nconst toggleSortOrder = () => {\n    const newOrder = sortOrder.value === 'asc' ? 'desc' : 'asc'; //sortOrderの値が'asc'なら「desc」を、そうでなければ「asc」をnewOrderとする\n    store.commit('SET_SORT_ORDER', newOrder); //storeのSET_SORT_ORDERにnewOrderをコミット\n};\n\nconst loadPokemonDetails = (name) => {\n    if (!pokemonDetails(name)) { //？？？pokemonDetails(name)がなかったら？\n        fetchPokemonDetails(name); //nameを引数としてfetchPokemonDetailsを実行\n    }\n};\n\nwatch(filteredPokemons, (newPokemons) => { //？？？\n    newPokemons.forEach(pokemon => loadPokemonDetails(pokemon.name)); //？？？\n});\n\nonMounted(() => {\n    fetchPokemons(); //fetchPokemons()を実行\n});\n</script>\n\n<style scoped>\n.loading_area {\n    display: flex;\n    justify-content: center;\n}\n\n.v-btn {\n    margin-bottom: 20px;\n}\n</style>\n"],"mappings":"AA4CA,SAASA,QAAQ,EAACC,KAAK,EAAEC,SAAS,QAAQ,KAAK;AAC/C,SAASC,QAAQ,QAAQ,MAAM;;;;;;;IAE/B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC;IAExB,MAAME,WAAW,GAAGL,QAAQ,CAAC;MAAE;MAC3BM,GAAG,EAAEA,CAAA,KAAMF,KAAK,CAACG,KAAK,CAACF,WAAW;MAAE;MACpCG,GAAG,EAAGC,KAAK,IAAKL,KAAK,CAACM,MAAM,CAAC,kBAAkB,EAAED,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAC;IAEF,MAAME,SAAS,GAAGX,QAAQ,CAAC,MAAMI,KAAK,CAACG,KAAK,CAACI,SAAS,CAAC,CAAC,CAAC;IACzD,MAAMC,gBAAgB,GAAGZ,QAAQ,CAAC,MAAMI,KAAK,CAACS,OAAO,CAACD,gBAAgB,CAAC,CAAC,CAAC;IACzE,MAAME,OAAO,GAAGd,QAAQ,CAAC,MAAMI,KAAK,CAACS,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;IACvD,MAAMC,cAAc,GAAIC,IAAI,IAAKZ,KAAK,CAACS,OAAO,CAACE,cAAc,CAACC,IAAI,CAAC,CAAC,CAAC;;IAErE,MAAMC,aAAa,GAAGA,CAAA,KAAMb,KAAK,CAACc,QAAQ,CAAC,eAAe,CAAC,EAAC;IAC5D,MAAMC,mBAAmB,GAAIH,IAAI,IAAKZ,KAAK,CAACc,QAAQ,CAAC,qBAAqB,EAAEF,IAAI,CAAC,CAAC;;IAElF,MAAMI,eAAe,GAAGA,CAAA,KAAM;MAC1B,MAAMC,QAAQ,GAAGV,SAAS,CAACF,KAAK,KAAK,KAAK,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;MAC7DL,KAAK,CAACM,MAAM,CAAC,gBAAgB,EAAEW,QAAQ,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,MAAMC,kBAAkB,GAAIN,IAAI,IAAK;MACjC,IAAI,CAACD,cAAc,CAACC,IAAI,CAAC,EAAE;QAAE;QACzBG,mBAAmB,CAACH,IAAI,CAAC,CAAC,CAAC;MAC/B;IACJ,CAAC;IAEDf,KAAK,CAACW,gBAAgB,EAAGW,WAAW,IAAK;MAAE;MACvCA,WAAW,CAACC,OAAO,CAACC,OAAO,IAAIH,kBAAkB,CAACG,OAAO,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC;IAEFd,SAAS,CAAC,MAAM;MACZe,aAAa,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}